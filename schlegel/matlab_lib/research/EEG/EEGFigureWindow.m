function h = EEGFigureWindow(t,y,varargin)
% EEGFigureWindow
% 
% Description:	construct an EEG window figure
% 
% Syntax:	h = EEGFigureWindow(t,y,[e]=<none>,<options>)
% 
% In:
% 	t	- the time vector
%	y	- a cell of data vectors
%	[e]	- a cell of standard error vectors
%	<options>:
%		title:		('') the title of the plot
%		erp:		('?') the ERP type
%		base:		('?') the base to which the windows are time locked
%		id:			(<none>) an identifier for the current figure (e.g. the
%					session name)
%		legend:		(<none>) the legend cell
%		color:		(<alexplot default>) the colors to use
%		t_unit_in:	('second') the input time units
%		t_unit_out:	('ms') the figure time units
%		y_unit_in:	('uV') the input y-axes units
%		y_unit_out:	('uV') the figure y-axes units
%		ymin:		(<auto>) minimum vertical axis value
%		ymax:		(<auto>) maximum vertical axis value
%		experiment:	(<none>) the name of the experiment
%		name:		(<from title>) a name to identify the plot type in the file
%					name
%		dir_out:	(<don't save>) the directory to which to save the plot
%		show:		(true) true to show the figure
%		close:		(~<show>) true to close the figure immediately
% 
% Out:
% 	h	- a handle struct
% 
% Updated: 2010-11-12
% Copyright 2010 Alex Schlegel (schlegel@gmail.com).  All Rights Reserved.
[e,opt]	= ParseArgs(varargin,[],...
			'title'			, ''		, ...
			'erp'			, '?'		, ...
			'base'			, '?'		, ...
			'id'			, ''		, ...
			'legend'		, []		, ...
			'color'			, []		, ...
			't_unit_in'		, 'second'	, ...
			't_unit_out'	, 'ms'		, ...
			'y_unit_in'		, 'uV'		, ...
			'y_unit_out'	, 'uV'		, ...
			'ymin'			, []		, ...
			'ymax'			, []		, ...
			'experiment'	, []		, ...
			'name'			, []		, ...
			'dir_out'		, []		, ...
			'show'			, true		, ...
			'close'			, []		  ...
			);
if isempty(opt.name)
	opt.name	= opt.title;
end
if isempty(opt.close)
	opt.close	= ~opt.show;
end
bSave	= ~isempty(opt.dir_out);

%labels
	strTitle	= [upper(opt.erp) conditional(isempty(opt.title),'',[', ' opt.title]) ', t=0 at ' opt.base conditional(isempty(opt.id),'',[' (' opt.id ')'])];
	strLabelX	= ['time (' opt.t_unit_out ', t=0 at ' opt.base ')'];
	strLabelY	= ['Amplitude (' opt.y_unit_out ')'];
%prepare the data
	t	= ConvertUnit(t,opt.t_unit_in,opt.t_unit_out);
	y	= cellfun(@(x) ConvertUnit(x,opt.y_unit_in,opt.y_unit_out),ForceCell(y),'UniformOutput',false);
	e	= cellfun(@(x) ConvertUnit(x,opt.y_unit_in,opt.y_unit_out),ForceCell(e),'UniformOutput',false);
%other parameters
	tMin	= sigfig(min(t),2);
	tMax	= sigfig(max(t),2);
%construct the plot
	h	= alexplot(t,y,...
			'error'			, e				, ...
			'title'			, strTitle		, ...
			'ylabel'		, strLabelY		, ...
			'xlabel'		, strLabelX		, ...
			'legend'		, opt.legend	, ...
			'colors'		, opt.color		, ...
			'xmin'			, tMin			, ...
			'xmax'			, tMax			, ...
			'ymin'			, opt.ymin		, ...
			'ymax'			, opt.ymax		, ...
			'hline'			, 0				, ...
			'hlinestyle'	, '--'			, ...
			'vline'			, 0				, ...
			'vlinewidth'	, 3				, ...
			'yreverse'		, true			, ...
			'show'			, opt.show		  ...
			);
%save the plot
	if bSave
		[strExperiment,strID,strERP,strBase,strName]	= varfun(@str2filename,opt.experiment,opt.id,opt.erp,opt.base,opt.name);
		
		cJoin							= {strExperiment,strID,strERP,strBase,strName};
		cJoin(cellfun(@isempty,cJoin))	= [];
		
		strFilePre	= join(cJoin,'-');
		strPathOut	= PathUnsplit(opt.dir_out,strFilePre,'eps');
		
		savefigure(h,strPathOut,opt.close);
	end
